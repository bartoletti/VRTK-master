<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Assembly-CSharp-Editor</name>
    </assembly>
    <members>
        <member name="T:OculusBuildApp">
            <summary>
            Allows Oculus to build apps from the command line.
            </summary>
        </member>
        <member name="T:OVRScreenshotWizard">
            <summary>
            From the selected transform, takes a cubemap screenshot that can be submitted with the application
            as a screenshot (or additionally used for reflection shaders).
            </summary>
        </member>
        <member name="M:OVRScreenshotWizard.OnWizardUpdate">
            <summary>
            Validates the user's input
            </summary>
        </member>
        <member name="M:OVRScreenshotWizard.CreateAssetPath(System.String)">
            <summary>
            Create the asset path if it is not available.
            Assuming the newFolderPath is stated with "Assets", which is a requirement.
            </summary>
        </member>
        <member name="M:OVRScreenshotWizard.OnWizardCreate">
            <summary>
            Renders the cubemap
            </summary>
        </member>
        <member name="M:OVRScreenshotWizard.GenerateTexture(UnityEngine.Cubemap,System.String)">
            <summary>
            Generates a NPOT 6x1 cubemap in the following format PX NX PY NY PZ NZ
            </summary>
        </member>
        <member name="M:OVRScreenshotWizard.TakeOVRScreenshot">
            <summary>
            Unity Editor menu option to take a screenshot
            </summary>
        </member>
        <member name="T:VRTK.Supyrb.SerializedPropertyExtensions">
            <summary>
            Extension class for SerializedProperties
            See also: http://answers.unity3d.com/questions/627090/convert-serializedproperty-to-custom-class.html
            </summary>
        </member>
        <member name="M:VRTK.Supyrb.SerializedPropertyExtensions.GetValue``1(UnityEditor.SerializedProperty)">
            <summary>
            Get the object the serialized property holds by using reflection
            </summary>
            <typeparam name="T">The object type that the property contains</typeparam>
            <param name="property"></param>
            <returns>Returns the object type T if it is the type the property actually contains</returns>
        </member>
        <member name="M:VRTK.Supyrb.SerializedPropertyExtensions.SetValue``1(UnityEditor.SerializedProperty,``0)">
            <summary>
            Set the value of a field of the property with the type T
            </summary>
            <typeparam name="T">The type of the field that is set</typeparam>
            <param name="property">The serialized property that should be set</param>
            <param name="value">The new value for the specified property</param>
            <returns>Returns if the operation was successful or failed</returns>
        </member>
        <member name="M:VRTK.Supyrb.SerializedPropertyExtensions.GetSerializedPropertyRootComponent(UnityEditor.SerializedProperty)">
            <summary>
            Get the component of a serialized property
            </summary>
            <param name="property">The property that is part of the component</param>
            <returns>The root component of the property</returns>
        </member>
        <member name="M:VRTK.Supyrb.SerializedPropertyExtensions.GetNestedObject``1(System.String,System.Object,System.Boolean)">
            <summary>
            Iterates through objects to handle objects that are nested in the root object
            </summary>
            <typeparam name="T">The type of the nested object</typeparam>
            <param name="path">Path to the object through other properties e.g. PlayerInformation.Health</param>
            <param name="obj">The root object from which this path leads to the property</param>
            <param name="includeAllBases">Include base classes and interfaces as well</param>
            <returns>Returns the nested object casted to the type T</returns>
        </member>
        <member name="M:VRTK.VRTK_SDKSetupEditor.DrawAndHandleSDKSelection``1(System.String,System.Int32)">
            <summary>
            Draws a popup menu and handles the selection for an SDK info.
            </summary>
            <typeparam name="BaseType">The SDK base type. Must be a subclass of <see cref="T:VRTK.SDK_Base"/>.</typeparam>
            <param name="description">The description of the SDK base.</param>
        </member>
    </members>
</doc>
